<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_c_a_nopen__socket_8h" kind="file" language="C++">
    <compoundname>CANopen_socket.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">linux/can/raw.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">mutex</includes>
    <includes local="no">initializer_list</includes>
    <includes refid="message_8h" local="yes">message.h</includes>
    <includes refid="payload_8h" local="yes">payload.h</includes>
    <includes refid="sdo_8h" local="yes">sdo.h</includes>
    <includes refid="pdo_8h" local="yes">pdo.h</includes>
    <includes refid="nmt_8h" local="yes">nmt.h</includes>
    <includes refid="emcy_8h" local="yes">emcy.h</includes>
    <includedby refid="_c_a_nopen__driver_8h" local="yes">CANopen_driver.h</includedby>
    <includedby refid="parameter_8h" local="yes">parameter.h</includedby>
    <includedby refid="_c_a_nopen__socket_8cpp" local="yes">CANopen_socket.cpp</includedby>
    <includedby refid="lib_2lxm32_2lib_2canopen_2src_2main_8cpp" local="yes">main.cpp</includedby>
    <incdepgraph>
      <node id="18">
        <label>emcy.h</label>
        <link refid="emcy_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstdint</label>
      </node>
      <node id="16">
        <label>pdo.h</label>
        <link refid="pdo_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>linux/can/raw.h</label>
      </node>
      <node id="14">
        <label>linux/can.h</label>
      </node>
      <node id="1">
        <label>CANopen_socket.h</label>
        <link refid="_c_a_nopen__socket_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="15">
        <label>sdo.h</label>
        <link refid="sdo_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="17">
        <label>nmt.h</label>
        <link refid="nmt_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>message.h</label>
        <link refid="message_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>mutex</label>
      </node>
      <node id="5">
        <label>sys/socket.h</label>
      </node>
      <node id="9">
        <label>payload.h</label>
        <link refid="payload_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
      <node id="7">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>CANopen_driver.cpp</label>
        <link refid="_c_a_nopen__driver_8cpp_source"/>
      </node>
      <node id="14">
        <label>CANopen_socket.cpp</label>
        <link refid="_c_a_nopen__socket_8cpp_source"/>
      </node>
      <node id="13">
        <label>parameter.cpp</label>
        <link refid="parameter_8cpp_source"/>
      </node>
      <node id="7">
        <label>mainwindow.cpp</label>
        <link refid="mainwindow_8cpp_source"/>
      </node>
      <node id="12">
        <label>parameter.h</label>
        <link refid="parameter_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>platform.cpp</label>
        <link refid="platform_8cpp_source"/>
      </node>
      <node id="6">
        <label>main.cpp</label>
        <link refid="src_2main_8cpp_source"/>
      </node>
      <node id="15">
        <label>main.cpp</label>
        <link refid="lib_2lxm32_2lib_2canopen_2src_2main_8cpp_source"/>
      </node>
      <node id="1">
        <label>CANopen_socket.h</label>
        <link refid="_c_a_nopen__socket_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>platform.hpp</label>
        <link refid="platform_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>CANopen_lxm32.h</label>
        <link refid="_c_a_nopen__lxm32_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CANopen_driver.h</label>
        <link refid="_c_a_nopen__driver_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>mainwindow.h</label>
        <link refid="mainwindow_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>main.cpp</label>
        <link refid="lib_2lxm32_2src_2main_8cpp_source"/>
      </node>
      <node id="9">
        <label>CANopen_lxm32.cpp</label>
        <link refid="_c_a_nopen__lxm32_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_c_a_nopen_1_1_socket" prot="public">CANopen::Socket</innerclass>
    <innernamespace refid="namespace_c_a_nopen">CANopen</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_c_a_nopen__socket_8h_1a7622b11a0067cd59b30bc251db9eb298" prot="public" static="no">
        <name>IF_VERBOSE</name>
        <param><defname>lvl</defname></param>
        <param><defname>cmd</defname></param>
        <param><defname>m_lvl</defname></param>
        <initializer>    if (m_lvl &gt;= lvl) { \
        CANopen::g_verbose_mutex.lock(); \
        cmd;                      \
        CANopen::g_verbose_mutex.unlock(); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adev/Documents/STECH/stewart_platform/lib/lxm32/lib/canopen/include/CANopen_socket.h" line="26" column="9" bodyfile="/home/adev/Documents/STECH/stewart_platform/lib/lxm32/lib/canopen/include/CANopen_socket.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Canopen socket able to send/receive messages through a CAN interface using the UNIX socket. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Florian Richer &amp; Alexis Devillard </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_CANOPEN_SOCKET_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CANOPEN_SOCKET_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/can/raw.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="message_8h" kindref="compound">message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="payload_8h" kindref="compound">payload.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sdo_8h" kindref="compound">sdo.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pdo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nmt_8h" kindref="compound">nmt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="emcy_8h" kindref="compound">emcy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IF_VERBOSE(lvl,<sp/>cmd,<sp/>m_lvl)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(m_lvl<sp/>&gt;=<sp/>lvl)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANopen::g_verbose_mutex.lock();<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANopen::g_verbose_mutex.unlock();<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CANopen<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::mutex<sp/>g_verbose_mutex;</highlight></codeline>
<codeline lineno="39" refid="class_c_a_nopen_1_1_socket" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_c_a_nopen_1_1_socket" kindref="compound">Socket</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_a_nopen_1_1_socket_1a66c37f6819a5ad8829326380812446e6" kindref="member">Socket</ref>(std::string<sp/>ifname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose_level<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_a_nopen_1_1_socket_1a66c37f6819a5ad8829326380812446e6" kindref="member">Socket</ref>(std::string<sp/>ifname,<sp/>uint32_t<sp/>cob_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbose_level<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_filter(std::initializer_list&lt;struct<sp/>can_filter&gt;<sp/>rfilter);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_a_nopen_1_1_socket_1a6f63808addc451747608c21b958821f4" kindref="member">bind</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_a_nopen_1_1_socket_1aa147801723e58f287d06b6df28837c44" kindref="member">send</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_a_nopen_1_1_message" kindref="compound">Message</ref>&amp;&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Message&gt;<sp/>receive();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_socket;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_ifname;<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_verbose_level;<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_CANOPEN_SOCKET_H_</highlight></codeline>
    </programlisting>
    <location file="/home/adev/Documents/STECH/stewart_platform/lib/lxm32/lib/canopen/include/CANopen_socket.h"/>
  </compounddef>
</doxygen>
